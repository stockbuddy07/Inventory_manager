
Inventory Management System - 5 Day Roadmap (For 3 Member Beginner Team)
=========================================================================

Tech Stack (Beginner Friendly)
------------------------------
- Frontend: HTML, CSS, JavaScript (Vanilla or React if confident)
- Backend: Node.js + Express
- Database: MongoDB (with Mongoose)
- Tools: VS Code, GitHub, Postman, MongoDB Atlas (cloud DB)

Team Roles
----------
You’ll divide and conquer but still help each other:
- Person A: Frontend Focus
- Person B: Backend Focus
- Person C: Database & Integration Focus

Day 1 – Set Up & Learn Basics
-----------------------------
Goal: Get your tools installed, understand the stack, and divide tasks

All Team Members:
- Install: Node.js, VS Code, Git, MongoDB Compass or Atlas
- Learn Basics:
  - HTML/CSS (Frontend person)
  - JavaScript (All)
  - Node.js & Express (Backend person)
  - MongoDB basics (DB person)

Split Tasks:
- Person A: Set up HTML skeleton (basic layout: dashboard + add item form)
- Person B: Set up Node.js + Express backend with /api/items
- Person C: Set up MongoDB (using MongoDB Atlas) and learn Mongoose

Day 2 – Create and Test Backend API
-----------------------------------
Goal: Backend CRUD API working and tested

Person B (Backend):
- Set up routes:
  - GET /api/items (List items)
  - POST /api/items (Add item)
  - PUT /api/items/:id (Update item)
  - DELETE /api/items/:id (Delete item)

Person C (Database):
- Design item schema: name, quantity, category, price
- Test DB connection
- Use Postman to test all APIs

Person A (Frontend):
- Make frontend page with table for inventory display
- Create form to add new item

Day 3 – Connect Frontend to Backend
-----------------------------------
Goal: See actual data from backend on frontend

Person A:
- Use fetch() or axios to:
  - Display list of items
  - Submit new item form
  - Add delete button to remove item

Person B & C:
- Help with API error handling and integration
- Add update functionality (edit item)

Day 4 – Features + UI Polish
----------------------------
Goal: Add useful features, clean UI

All Team Members:
- Add search/filter
- Show warning if quantity < 5
- Add sorting (by price, name)
- Style pages (Bootstrap or custom CSS)

Optional:
- Add login page (just username/password for now)
- Use localStorage or a simple login flag

Day 5 – Test, Fix, Deploy
-------------------------
Goal: Launch MVP and document it

All Team Members:
- Fix bugs, test on different browsers
- Deploy backend (Render/Railway)
- Deploy frontend (Netlify/Vercel)
- Push all code to GitHub
- Create a README file

Final Features
--------------
- Add, view, update, delete inventory items
- Simple UI for managing items
- Optional login
- Search, sort, low-stock alerts
